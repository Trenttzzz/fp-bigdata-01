networks:
  lakehouse:
    driver: bridge

volumes:
  minio_data:
  postgres_data:
  spark_data:
  spark_checkpoints:
  zookeeper_data:
  kafka_data:

services:
  # ... (all services before spark-etl-job remain the same) ...
  minio:
    image: minio/minio
    container_name: lakehouse-minio
    networks:
      - lakehouse
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  minio-setup:
    image: minio/mc:latest
    container_name: lakehouse-minio-setup
    networks:
      - lakehouse
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      mc mb minio/bronze --ignore-existing;
      mc mb minio/silver --ignore-existing;
      mc mb minio/gold --ignore-existing;
      mc mb minio/models --ignore-existing;
      echo 'MinIO buckets created successfully';
      "

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: lakehouse-zookeeper
    networks:
      - lakehouse
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: lakehouse-kafka
    networks:
      - lakehouse
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  spark-master:
    # image: bitnami/spark:3.5
    build:
      context: .
      dockerfile: Dockerfile.spark
    image: fp-bigdata-01-spark
    container_name: lakehouse-spark-master
    networks:
      - lakehouse
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_WEBUI_PORT=8081
    ports:
      - "8081:8081"
      - "7077:7077"
    volumes:
      - ./spark-apps:/opt/bitnami/spark/apps
      # Mount the config file so all jobs can use it
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  spark-worker-1:
    # image: bitnami/spark:3.5
    build:
      context: .
      dockerfile: Dockerfile.spark
    image: fp-bigdata-01-spark
    container_name: lakehouse-spark-worker-1
    networks:
      - lakehouse
    depends_on:
      spark-master:
        condition: service_healthy
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1g
      - SPARK_WORKER_CORES=1
    volumes:
      - ./spark-apps:/opt/bitnami/spark/apps
      # Mount the config file so all jobs can use it
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    restart: unless-stopped

  # CORRECTED SERVICE: Command is now simpler
  spark-etl-job:
    # image: bitnami/spark:3.5
    build:
      context: .
      dockerfile: Dockerfile.spark
    image: fp-bigdata-01-spark
    container_name: lakehouse-etl-job
    networks:
      - lakehouse
    depends_on:
      spark-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    command:
      - "/opt/bitnami/spark/bin/spark-submit"
      - "--master"
      - "spark://spark-master:7077"
      - "/opt/bitnami/spark/apps/spark_etl_job.py"
    volumes:
      - ./spark-apps:/opt/bitnami/spark/apps
      # Mount the config file so the job can find the packages
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    restart: on-failure

  # ... (all services after spark-etl-job remain the same) ...
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: lakehouse-jupyter
    networks:
      - lakehouse
    depends_on:
      - spark-etl-job
    ports:
      - "8888:8888"
      - "4040:4040"
    volumes:
      - ./notebooks:/home/jovyan/work/notebooks
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    restart: unless-stopped

  data-producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: lakehouse-data-producer
    networks:
      - lakehouse
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=ecommerce-events
    restart: unless-stopped

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: lakehouse-mlflow
    networks:
      - lakehouse
    depends_on:
      postgres:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    ports:
      - "5000:5000"
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5000"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  model-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: lakehouse-model-api
    networks:
      - lakehouse
    depends_on:
      mlflow:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    volumes:
      - ./api:/app
    restart: unless-stopped

  postgres:
    image: postgres:13
    container_name: lakehouse-postgres
    networks:
      - lakehouse
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow
      - POSTGRES_DB=mlflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  batch-trainer:
    build:
      context: .
      dockerfile: Dockerfile.batch-trainer
    container_name: lakehouse-batch-trainer
    networks:
      - lakehouse
    depends_on:
      - spark-etl-job
      - mlflow
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    restart: on-failure
