FROM python:3.9-slim

WORKDIR /app

# Install ALL required system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    openjdk-17-jdk-headless \
    procps \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Set the JAVA_HOME environment variable for PySpark
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64

# Install Python dependencies
RUN pip install --no-cache-dir \
    pyspark==3.5.0 \
    delta-spark==3.2.0 \
    mlflow==2.10.2 \
    boto3==1.34.34 \
    pandas==2.1.4 \
    scikit-learn==1.4.2 \
    kafka-python==2.0.2 \
    psycopg2-binary==2.9.9 \
    schedule==1.2.0 \
    lightgbm==4.3.0

# Copy Spark configuration
COPY ./config/spark-defaults.conf /usr/local/lib/python3.9/site-packages/pyspark/conf/

# Pre-download Spark packages during build
RUN python -c "from pyspark.sql import SparkSession; spark = SparkSession.builder.getOrCreate(); spark.stop()"

# Copy the main logic script
COPY ./batch-trainer/batch_training_engine.py /app/

# Create the main script to run the scheduler using a "here document" for reliability
RUN <<EOF /bin/sh -c 'cat > /app/run_trainer.py'
#!/usr/bin/env python3
import time
import schedule
import logging
from batch_training_engine import BatchTrainingEngine

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

def main():
    try:
        logger.info("--- Starting Batch Training Service ---")
        trainer = BatchTrainingEngine()
        
        # Schedule to run every 3 minutes
        schedule.every(3).minutes.do(trainer.train_model)
        
        logger.info("Running initial training on startup...")
        time.sleep(120) # Wait 2 minutes before first run
        trainer.train_model()
        
        logger.info("--- Batch training scheduler started. Waiting for next run... ---")
        while True:
            schedule.run_pending()
            time.sleep(60)
            
    except Exception as e:
        logger.error(f"Batch trainer failed critically: {e}", exc_info=True)

if __name__ == "__main__":
    main()
EOF

# Make the script executable
RUN chmod +x /app/run_trainer.py

# Run the scheduler
CMD ["python", "/app/run_trainer.py"]